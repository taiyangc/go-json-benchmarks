// Code generated by protoc-gen-gogo.
// source: Pb.proto
// DO NOT EDIT!

/*
	Package Pb is a generated protocol buffer package.

	It is generated from these files:
		Pb.proto

	It has these top-level messages:
		PbTestObject
*/
package with_10_int_fields

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strings "strings"
import reflect "reflect"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PbTestObject struct {
	Field1  int32 `protobuf:"varint,1,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2  int32 `protobuf:"varint,2,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3  int32 `protobuf:"varint,3,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4  int32 `protobuf:"varint,4,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5  int32 `protobuf:"varint,5,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6  int32 `protobuf:"varint,6,opt,name=field6,proto3" json:"field6,omitempty"`
	Field7  int32 `protobuf:"varint,7,opt,name=field7,proto3" json:"field7,omitempty"`
	Field8  int32 `protobuf:"varint,8,opt,name=field8,proto3" json:"field8,omitempty"`
	Field9  int32 `protobuf:"varint,9,opt,name=field9,proto3" json:"field9,omitempty"`
	Field10 int32 `protobuf:"varint,10,opt,name=field10,proto3" json:"field10,omitempty"`
}

func (m *PbTestObject) Reset()                    { *m = PbTestObject{} }
func (*PbTestObject) ProtoMessage()               {}
func (*PbTestObject) Descriptor() ([]byte, []int) { return fileDescriptorPb, []int{0} }

func (m *PbTestObject) GetField1() int32 {
	if m != nil {
		return m.Field1
	}
	return 0
}

func (m *PbTestObject) GetField2() int32 {
	if m != nil {
		return m.Field2
	}
	return 0
}

func (m *PbTestObject) GetField3() int32 {
	if m != nil {
		return m.Field3
	}
	return 0
}

func (m *PbTestObject) GetField4() int32 {
	if m != nil {
		return m.Field4
	}
	return 0
}

func (m *PbTestObject) GetField5() int32 {
	if m != nil {
		return m.Field5
	}
	return 0
}

func (m *PbTestObject) GetField6() int32 {
	if m != nil {
		return m.Field6
	}
	return 0
}

func (m *PbTestObject) GetField7() int32 {
	if m != nil {
		return m.Field7
	}
	return 0
}

func (m *PbTestObject) GetField8() int32 {
	if m != nil {
		return m.Field8
	}
	return 0
}

func (m *PbTestObject) GetField9() int32 {
	if m != nil {
		return m.Field9
	}
	return 0
}

func (m *PbTestObject) GetField10() int32 {
	if m != nil {
		return m.Field10
	}
	return 0
}

func init() {
	proto.RegisterType((*PbTestObject)(nil), "PbTestObject")
}
func (this *PbTestObject) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*PbTestObject)
	if !ok {
		that2, ok := that.(PbTestObject)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	return true
}
func (this *PbTestObject) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&Pb.PbTestObject{")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	s = append(s, "Field4: "+fmt.Sprintf("%#v", this.Field4)+",\n")
	s = append(s, "Field5: "+fmt.Sprintf("%#v", this.Field5)+",\n")
	s = append(s, "Field6: "+fmt.Sprintf("%#v", this.Field6)+",\n")
	s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	s = append(s, "Field8: "+fmt.Sprintf("%#v", this.Field8)+",\n")
	s = append(s, "Field9: "+fmt.Sprintf("%#v", this.Field9)+",\n")
	s = append(s, "Field10: "+fmt.Sprintf("%#v", this.Field10)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringPb(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *PbTestObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PbTestObject) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Field1 != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field1))
	}
	if m.Field2 != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field2))
	}
	if m.Field3 != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field3))
	}
	if m.Field4 != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field4))
	}
	if m.Field5 != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field5))
	}
	if m.Field6 != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field6))
	}
	if m.Field7 != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field7))
	}
	if m.Field8 != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field8))
	}
	if m.Field9 != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field9))
	}
	if m.Field10 != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintPb(dAtA, i, uint64(m.Field10))
	}
	return i, nil
}

func encodeFixed64Pb(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Pb(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPb(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PbTestObject) Size() (n int) {
	var l int
	_ = l
	if m.Field1 != 0 {
		n += 1 + sovPb(uint64(m.Field1))
	}
	if m.Field2 != 0 {
		n += 1 + sovPb(uint64(m.Field2))
	}
	if m.Field3 != 0 {
		n += 1 + sovPb(uint64(m.Field3))
	}
	if m.Field4 != 0 {
		n += 1 + sovPb(uint64(m.Field4))
	}
	if m.Field5 != 0 {
		n += 1 + sovPb(uint64(m.Field5))
	}
	if m.Field6 != 0 {
		n += 1 + sovPb(uint64(m.Field6))
	}
	if m.Field7 != 0 {
		n += 1 + sovPb(uint64(m.Field7))
	}
	if m.Field8 != 0 {
		n += 1 + sovPb(uint64(m.Field8))
	}
	if m.Field9 != 0 {
		n += 1 + sovPb(uint64(m.Field9))
	}
	if m.Field10 != 0 {
		n += 1 + sovPb(uint64(m.Field10))
	}
	return n
}

func sovPb(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPb(x uint64) (n int) {
	return sovPb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *PbTestObject) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&PbTestObject{`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringPb(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *PbTestObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PbTestObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PbTestObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			m.Field1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field1 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			m.Field2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field2 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			m.Field3 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field3 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			m.Field4 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field4 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			m.Field5 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field5 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			m.Field6 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field6 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			m.Field7 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field7 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			m.Field8 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field8 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			m.Field9 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field9 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			m.Field10 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Field10 |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPb
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPb
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPb(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPb = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPb   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("Pb.proto", fileDescriptorPb) }

var fileDescriptorPb = []byte{
	// 202 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x08, 0x48, 0xd2, 0x2b,
	0x28, 0xca, 0x2f, 0xc9, 0x57, 0x6a, 0x60, 0xe2, 0xe2, 0x09, 0x48, 0x0a, 0x49, 0x2d, 0x2e, 0xf1,
	0x4f, 0xca, 0x4a, 0x4d, 0x2e, 0x11, 0x12, 0xe3, 0x62, 0x4b, 0xcb, 0x4c, 0xcd, 0x49, 0x31, 0x94,
	0x60, 0x54, 0x60, 0xd4, 0x60, 0x0d, 0x82, 0xf2, 0xe0, 0xe2, 0x46, 0x12, 0x4c, 0x48, 0xe2, 0x46,
	0x70, 0x71, 0x63, 0x09, 0x66, 0x24, 0x71, 0x63, 0xb8, 0xb8, 0x89, 0x04, 0x0b, 0x92, 0xb8, 0x09,
	0x5c, 0xdc, 0x54, 0x82, 0x15, 0x49, 0xdc, 0x14, 0x2e, 0x6e, 0x26, 0xc1, 0x86, 0x24, 0x6e, 0x06,
	0x17, 0x37, 0x97, 0x60, 0x47, 0x12, 0x37, 0x87, 0x8b, 0x5b, 0x48, 0x70, 0x20, 0x89, 0x5b, 0xc0,
	0xc5, 0x2d, 0x25, 0x38, 0x91, 0xc4, 0x2d, 0x85, 0x24, 0xb8, 0xd8, 0x21, 0x3e, 0x31, 0x90, 0xe0,
	0x02, 0x4b, 0xc0, 0xb8, 0x4e, 0x7a, 0x17, 0x1e, 0xca, 0x31, 0xdc, 0x78, 0x28, 0xc7, 0xf0, 0xe1,
	0xa1, 0x1c, 0x63, 0xc3, 0x23, 0x39, 0xc6, 0x15, 0x8f, 0xe4, 0x18, 0x4f, 0x3c, 0x92, 0x63, 0xbc,
	0xf0, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x17, 0x8f, 0xe4, 0x18, 0x3e, 0x3c, 0x92, 0x63,
	0x9c, 0xf0, 0x58, 0x8e, 0xc1, 0x83, 0x31, 0x89, 0x0d, 0x1c, 0x72, 0xc6, 0x80, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xc2, 0xae, 0x6c, 0xf0, 0x45, 0x01, 0x00, 0x00,
}
