// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package with_10_int_fields

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10IntFields(in *jlexer.Lexer, out *PbTestObject) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "field1":
			out.Field1 = int32(in.Int32())
		case "field2":
			out.Field2 = int32(in.Int32())
		case "field3":
			out.Field3 = int32(in.Int32())
		case "field4":
			out.Field4 = int32(in.Int32())
		case "field5":
			out.Field5 = int32(in.Int32())
		case "field6":
			out.Field6 = int32(in.Int32())
		case "field7":
			out.Field7 = int32(in.Int32())
		case "field8":
			out.Field8 = int32(in.Int32())
		case "field9":
			out.Field9 = int32(in.Int32())
		case "field10":
			out.Field10 = int32(in.Int32())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10IntFields(out *jwriter.Writer, in PbTestObject) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Field1 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field1\":")
		out.Int32(int32(in.Field1))
	}
	if in.Field2 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field2\":")
		out.Int32(int32(in.Field2))
	}
	if in.Field3 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field3\":")
		out.Int32(int32(in.Field3))
	}
	if in.Field4 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field4\":")
		out.Int32(int32(in.Field4))
	}
	if in.Field5 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field5\":")
		out.Int32(int32(in.Field5))
	}
	if in.Field6 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field6\":")
		out.Int32(int32(in.Field6))
	}
	if in.Field7 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field7\":")
		out.Int32(int32(in.Field7))
	}
	if in.Field8 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field8\":")
		out.Int32(int32(in.Field8))
	}
	if in.Field9 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field9\":")
		out.Int32(int32(in.Field9))
	}
	if in.Field10 != 0 {
		if !first {
			out.RawByte(',')
		}
		first = false
		out.RawString("\"field10\":")
		out.Int32(int32(in.Field10))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PbTestObject) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10IntFields(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PbTestObject) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson5fcf962eEncodeGithubComJsonIteratorGoBenchmarkWith10IntFields(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PbTestObject) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10IntFields(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PbTestObject) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson5fcf962eDecodeGithubComJsonIteratorGoBenchmarkWith10IntFields(l, v)
}
